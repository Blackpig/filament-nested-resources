<?php

namespace Guava\Filament\NestedResources\Pages;

use Filament\Actions\Action;
use Filament\Actions\CreateAction;
use Filament\Actions\DeleteAction;
use Filament\Resources\Pages\CreateRecord;
use Guava\Filament\NestedResources\Resources\NestedResource;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Arr;
use Livewire\Livewire;

use function Guava\Filament\NestedResources\get_resource_route_parameter;

trait NestedPage
{
    /**
     * @var Model|null
     */
    public $ownerRecord = null;

    public array $arguments = [];

    protected function resolveArguments(array $arguments)
    {
        if (! ($this instanceof CreateRecord)) {
            return [];
        }
        /** @var NestedResource $resource */
        $resource = static::getResource();

        $arguments = Arr::mapWithKeys(array_reverse($arguments), function ($id) use (&$resource) {
            $resource = $resource::getParentResource();
            $parameter = get_resource_route_parameter($resource);

            return [$parameter => $id];
        });

        $this->ownerRecord = static::getResource()::getParentResource()::getModel()::find(
            Arr::first($arguments)
        );

        return array_reverse($arguments);
    }

    public function mountNestedPage(): void
    {
        $this->arguments = $this->resolveArguments(func_get_args());
    }

    protected function getRedirectUrl(): string
    {
        if ($this instanceof CreateRecord) {
            return static::getResource()::getParentResource()::getUrl('edit', array_reverse(array_values($this->getRouteParameters())));
        } else {
            return parent::getRedirectUrl();
        }
    }

    protected function configureAction(Action $action): void
    {
        //        dd(static::getResource(),static::getResource()::getRouteParameterNames(), $this->getRouteParameters());
        parent::configureAction($action);

        match (true) {
            $action instanceof CreateAction => $action->successRedirectUrl(function (Livewire $livewire) {
                //                    dd('RECORD: ' . $livewire->getRecord());
                return 'http://www.google.com';
            }),
            $action instanceof DeleteAction => $action->successRedirectUrl(static::getResource()::getParentResource()::getUrl('edit', array_reverse(array_values($this->getRouteParameters())))),
            //            $action instanceof ForceDeleteAction => $this->configureForceDeleteAction($action),
            //            $action instanceof ReplicateAction => $this->configureReplicateAction($action),
            //            $action instanceof RestoreAction => $this->configureRestoreAction($action),
            //            $action instanceof ViewAction => $this->configureViewAction($action),
            default => null,
        };
    }
    //    protected function configureDeleteAction(DeleteAction $action): void
    //    {
    //        parent::configureDeleteAction($action); // TODO: Change the autogenerated stub
    //    }

    protected function getRouteParameters(): array
    {
        if ($this instanceof CreateRecord) {

        }

        $record = $this->getRecord();

        //        dd($record, static::getResource()::getRouteParameterNames());
        $resource = static::getResource();

        return Arr::mapWithKeys(static::getResource()::getRouteParameterNames(), function (string $parameter) use (&$resource, &$record) {

            if ($record && in_array(NestedResource::class, class_parents($resource))) {
                $relationship = $resource::getRelationshipName();
                $record = $record->$relationship;
                //                dd($resource, $parameter, $relationship, $record);
            } else {
                $record = $this->ownerRecord;
            }
            $result = [$parameter => $record->id];
            $resource = $resource::getParentResource();

            return $result;
        });
    }

    protected function createRecordAndCallHooks(array $data): void
    {
        if ($this->ownerRecord) {
            $key = str('')
                //TODO: Test with Translatable
//                ->when(
//                    in_array(CreateRecord\Concerns\Translatable::class, class_uses($this)),
//                    fn (Stringable $stringable) => $stringable->append(array_key_first($data), '.'),
//                )
                ->append(static::getResource()::getRelationshipName().'_id')
                ->toString()
            ;

            data_set($data, $key, $this->ownerRecord->id);
        }

        parent::createRecordAndCallHooks($data);
    }
}
